{"ast":null,"code":"var _jsxFileName = \"/Users/work/Desktop/coding-interviews/calendar/components/Calendar/Calendar.js\";\nvar __jsx = React.createElement;\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { TableCell, Table, TableHead, TableRow, TableBody } from \"@material-ui/core\";\n\nconst firstDayOfMonth = dateObj => moment(dateObj).startOf(\"month\").format(\"d\");\n\nexport default function Calendar() {\n  const {\n    0: currentDate,\n    1: setCurrentDate\n  } = useState(moment());\n  const weekdayOfFirst = firstDayOfMonth(currentDate);\n  let emptyCellsBeforeMonth = [];\n\n  for (let i = 0; i < weekdayOfFirst; i++) {\n    emptyCellsBeforeMonth.push(__jsx(TableCell, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 32\n      }\n    }));\n  }\n\n  let daysInMonth = [];\n\n  for (let i = 1; i <= currentDate.daysInMonth(); i++) {\n    daysInMonth.push(__jsx(TableCell, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 22\n      }\n    }, i));\n  }\n\n  var totalSlots = [...emptyCellsBeforeMonth, ...daysInMonth];\n  let rows = [];\n  let counter = 0;\n\n  while (counter < totalSlots.length) {\n    const week = totalSlots.slice(counter, counter + 7);\n    rows.push(week);\n    counter += 7;\n  }\n\n  let daysinmonth = rows.map((d, i) => {\n    return __jsx(TableRow, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, d);\n  });\n  let weekdayNames = moment.weekdaysShort().map(day => __jsx(TableCell, {\n    key: day,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }\n  }, day));\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, weekdayNames)), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, daysinmonth)));\n}","map":{"version":3,"sources":["/Users/work/Desktop/coding-interviews/calendar/components/Calendar/Calendar.js"],"names":["moment","React","useState","TableCell","Table","TableHead","TableRow","TableBody","firstDayOfMonth","dateObj","startOf","format","Calendar","currentDate","setCurrentDate","weekdayOfFirst","emptyCellsBeforeMonth","i","push","daysInMonth","totalSlots","rows","counter","length","week","slice","daysinmonth","map","d","weekdayNames","weekdaysShort","day"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,SADF,EAEEC,KAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,SALF,QAMO,mBANP;;AAQA,MAAMC,eAAe,GAAIC,OAAD,IACtBT,MAAM,CAACS,OAAD,CAAN,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCC,MAAjC,CAAwC,GAAxC,CADF;;AAGA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAACF,MAAM,EAAP,CAA9C;AAEA,QAAMe,cAAc,GAAGP,eAAe,CAACK,WAAD,CAAtC;AACA,MAAIG,qBAAqB,GAAG,EAA5B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,EAArC,EAAyC;AACvCD,IAAAA,qBAAqB,CAACE,IAAtB,CAA2B,MAAC,SAAD;AAAW,MAAA,GAAG,EAAED,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA3B;AACD;;AAED,MAAIE,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,WAAW,CAACM,WAAZ,EAArB,EAAgDF,CAAC,EAAjD,EAAqD;AACnDE,IAAAA,WAAW,CAACD,IAAZ,CAAiB,MAAC,SAAD;AAAW,MAAA,GAAG,EAAED,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBA,CAApB,CAAjB;AACD;;AAED,MAAIG,UAAU,GAAG,CAAC,GAAGJ,qBAAJ,EAA2B,GAAGG,WAA9B,CAAjB;AACA,MAAIE,IAAI,GAAG,EAAX;AACA,MAAIC,OAAO,GAAG,CAAd;;AACA,SAAOA,OAAO,GAAGF,UAAU,CAACG,MAA5B,EAAoC;AAClC,UAAMC,IAAI,GAAGJ,UAAU,CAACK,KAAX,CAAiBH,OAAjB,EAA0BA,OAAO,GAAG,CAApC,CAAb;AACAD,IAAAA,IAAI,CAACH,IAAL,CAAUM,IAAV;AACAF,IAAAA,OAAO,IAAI,CAAX;AACD;;AAED,MAAII,WAAW,GAAGL,IAAI,CAACM,GAAL,CAAS,CAACC,CAAD,EAAIX,CAAJ,KAAU;AACnC,WAAO,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBW,CAAnB,CAAP;AACD,GAFiB,CAAlB;AAIA,MAAIC,YAAY,GAAG7B,MAAM,CACtB8B,aADgB,GAEhBH,GAFgB,CAEXI,GAAD,IAAS,MAAC,SAAD;AAAW,IAAA,GAAG,EAAEA,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBA,GAAtB,CAFG,CAAnB;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWF,YAAX,CADF,CADF,EAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYH,WAAZ,CAJF,CADF,CADF;AAUD","sourcesContent":["import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport {\n  TableCell,\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n} from \"@material-ui/core\";\n\nconst firstDayOfMonth = (dateObj) =>\n  moment(dateObj).startOf(\"month\").format(\"d\");\n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(moment());\n\n  const weekdayOfFirst = firstDayOfMonth(currentDate);\n  let emptyCellsBeforeMonth = [];\n  for (let i = 0; i < weekdayOfFirst; i++) {\n    emptyCellsBeforeMonth.push(<TableCell key={i}/>);\n  }\n\n  let daysInMonth = [];\n  for (let i = 1; i <= currentDate.daysInMonth(); i++) {\n    daysInMonth.push(<TableCell key={i}>{i}</TableCell>);\n  }\n\n  var totalSlots = [...emptyCellsBeforeMonth, ...daysInMonth];\n  let rows = [];\n  let counter = 0;\n  while (counter < totalSlots.length) {\n    const week = totalSlots.slice(counter, counter + 7);\n    rows.push(week);\n    counter += 7;\n  }\n\n  let daysinmonth = rows.map((d, i) => {\n    return <TableRow key={i}>{d}</TableRow>;\n  });\n\n  let weekdayNames = moment\n    .weekdaysShort()\n    .map((day) => <TableCell key={day}>{day}</TableCell>);\n\n  return (\n    <div>\n      <Table>\n        <TableHead>\n          <TableRow>{weekdayNames}</TableRow>\n        </TableHead>\n        <TableBody>{daysinmonth}</TableBody>\n      </Table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}