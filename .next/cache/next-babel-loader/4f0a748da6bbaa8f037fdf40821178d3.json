{"ast":null,"code":"var _jsxFileName = \"/Users/work/Desktop/coding-interviews/calendar/components/calendar/Calendar.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { TableCell, Table, TableHead, TableRow, TableBody } from \"@material-ui/core\";\nimport Day from \"../day/Day\";\nimport DaysHeader from \"../daysHeader/DaysHeader\";\n\nvar firstDayOfMonth = function firstDayOfMonth(dateObj) {\n  return moment(dateObj).startOf(\"month\").format(\"d\");\n}; // TODO: week component\n\n\nexport default function Calendar() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(moment()),\n      currentDate = _useState[0],\n      setCurrentDate = _useState[1];\n\n  var daysBeforeMonthStart = firstDayOfMonth(currentDate);\n  var emptyCellsBeforeMonth = [];\n\n  for (var i = 0; i < daysBeforeMonthStart; i++) {\n    emptyCellsBeforeMonth.push(__jsx(TableCell, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 32\n      }\n    }));\n  }\n\n  var daysInMonth = [];\n\n  for (var _i = 1; _i <= currentDate.daysInMonth(); _i++) {\n    var isBeforeCurrentDate = _i < currentDate.format(\"D\") ? true : false;\n    daysInMonth.push(__jsx(Day, {\n      isBeforeCurrentDate: isBeforeCurrentDate,\n      dayOfMonth: _i,\n      key: _i + daysBeforeMonthStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  var totalSlots = [].concat(emptyCellsBeforeMonth, daysInMonth); // let rows = [];\n  // let counter = 0;\n\n  var weeks = [];\n\n  for (var _i2 = 0; _i2 < totalSlots.length; _i2 + 7) {\n    var weekdays = totalSlots.slice(counter, counter + 7);\n    weeks.push(__jsx(Week, {\n      days: weekdays,\n      index: _i2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 16\n      }\n    }));\n  }\n\n  var Week = function Week(_ref) {\n    var days = _ref.days,\n        index = _ref.index;\n    return __jsx(TableRow, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 33\n      }\n    }, days);\n  }; // while (counter < totalSlots.length) {\n  //   const week = totalSlots.slice(counter, counter + 7);\n  //   rows.push(week);\n  //   counter += 7;\n  // }\n  // let weeks = rows.map((d, i) => {\n  //   return <TableRow key={i}>{d}</TableRow>;\n  // });\n\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(DaysHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  })), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, weeks)));\n}\n\n_s(Calendar, \"BUilyegn1iHQlzg9x/p8lMQPuNs=\");\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/work/Desktop/coding-interviews/calendar/components/calendar/Calendar.js"],"names":["moment","React","useState","TableCell","Table","TableHead","TableRow","TableBody","Day","DaysHeader","firstDayOfMonth","dateObj","startOf","format","Calendar","currentDate","setCurrentDate","daysBeforeMonthStart","emptyCellsBeforeMonth","i","push","daysInMonth","isBeforeCurrentDate","totalSlots","weeks","length","weekdays","slice","counter","Week","days","index"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport {\n  TableCell,\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n} from \"@material-ui/core\";\nimport Day from \"../day/Day\";\nimport DaysHeader from \"../daysHeader/DaysHeader\";\n\nconst firstDayOfMonth = (dateObj) =>\n  moment(dateObj).startOf(\"month\").format(\"d\");\n\n// TODO: week component\n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(moment());\n\n  const daysBeforeMonthStart = firstDayOfMonth(currentDate);\n  let emptyCellsBeforeMonth = [];\n  for (let i = 0; i < daysBeforeMonthStart; i++) {\n    emptyCellsBeforeMonth.push(<TableCell key={i} />);\n  }\n\n  let daysInMonth = [];\n  for (let i = 1; i <= currentDate.daysInMonth(); i++) {\n    let isBeforeCurrentDate = i < currentDate.format(\"D\") ? true : false;\n    daysInMonth.push(\n      <Day\n        isBeforeCurrentDate={isBeforeCurrentDate}\n        dayOfMonth={i}\n        key={i + daysBeforeMonthStart}\n      ></Day>\n    );\n  }\n\n  var totalSlots = [...emptyCellsBeforeMonth, ...daysInMonth];\n  // let rows = [];\n  // let counter = 0;\n\n  let weeks = []\n  for (let i=0; i<totalSlots.length; i+7) {\n    const weekdays = totalSlots.slice(counter, counter + 7);\n    weeks.push(<Week days={weekdays} index={i}/>)\n  }\n\nconst Week = ({days, index}) => <TableRow key={index}>{days}</TableRow>\n\n\n\n\n  // while (counter < totalSlots.length) {\n  //   const week = totalSlots.slice(counter, counter + 7);\n  //   rows.push(week);\n  //   counter += 7;\n  // }\n\n  // let weeks = rows.map((d, i) => {\n  //   return <TableRow key={i}>{d}</TableRow>;\n  // });\n\n  return (\n    <div>\n      <Table>\n        <TableHead>\n          <DaysHeader></DaysHeader>\n        </TableHead>\n        <TableBody>{weeks}</TableBody>\n      </Table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}