{"ast":null,"code":"var _jsxFileName = \"/Users/work/Desktop/coding-interviews/calendar/components/Calendar/Calendar.js\";\nvar __jsx = React.createElement;\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\n\nconst firstDayOfMonth = dateObj => moment(dateObj).startOf(\"month\").format(\"d\");\n\nexport default function Calendar() {\n  const weekdayshort = moment.weekdaysShort();\n  const {\n    0: currentDate,\n    1: setCurrentDate\n  } = useState(moment());\n  const firstDay = firstDayOfMonth(currentDate);\n  let blanks = [];\n  const emptyCellsBeforeMonth = Array(firstDay).fill();\n\n  for (let i = 0; i < firstDay; i++) {\n    blanks.push(__jsx(\"td\", {\n      className: \"calendar-day empty\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }\n    }, \"\"));\n  }\n\n  let daysInMonth = [];\n\n  for (let d = 1; d <= currentDate.daysInMonth(); d++) {\n    daysInMonth.push(__jsx(\"td\", {\n      key: d,\n      className: \"calendar-day\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, d));\n  }\n\n  let weekday = weekdayshort.map(day => __jsx(\"th\", {\n    key: day,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 43\n    }\n  }, day));\n  var totalSlots = [...blanks, ...daysInMonth];\n  let rows = [];\n  let cells = [];\n  totalSlots.forEach((row, i) => {\n    if (i % 7 !== 0) {\n      cells.push(row); // if index not equal 7 that means not go to next week\n    } else {\n      rows.push(cells); // when reach next week we contain all td in last week to rows\n\n      cells = []; // empty container\n\n      cells.push(row); // in current loop we still push current row to new container\n    }\n\n    if (i === totalSlots.length - 1) {\n      // when end loop we add remain date\n      rows.push(cells);\n    }\n  });\n  let daysinmonth = rows.map((d, i) => {\n    return __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    }, d);\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(\"table\", {\n    className: \"calendar-day\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, weekday)), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, daysinmonth)));\n}","map":{"version":3,"sources":["/Users/work/Desktop/coding-interviews/calendar/components/Calendar/Calendar.js"],"names":["moment","React","useState","firstDayOfMonth","dateObj","startOf","format","Calendar","weekdayshort","weekdaysShort","currentDate","setCurrentDate","firstDay","blanks","emptyCellsBeforeMonth","Array","fill","i","push","daysInMonth","d","weekday","map","day","totalSlots","rows","cells","forEach","row","length","daysinmonth"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport React, { useState } from \"react\";\n\nconst firstDayOfMonth = (dateObj) =>\n  moment(dateObj).startOf(\"month\").format(\"d\");\n\nexport default function Calendar() {\n  const weekdayshort = moment.weekdaysShort();\n  const [currentDate, setCurrentDate] = useState(moment());\n  const firstDay = firstDayOfMonth(currentDate);\n  let blanks = [];\n\n  const emptyCellsBeforeMonth = Array(firstDay).fill()\n  for (let i = 0; i < firstDay; i++) {\n    blanks.push(<td className=\"calendar-day empty\">{\"\"}</td>);\n  }\n\n  let daysInMonth = [];\n  for (let d = 1; d <= currentDate.daysInMonth(); d++) {\n    daysInMonth.push(\n      <td key={d} className=\"calendar-day\">\n        {d}\n      </td>\n    );\n  }\n  let weekday = weekdayshort.map((day) => <th key={day}>{day}</th>);\n\n  var totalSlots = [...blanks, ...daysInMonth];\n  let rows = [];\n  let cells = [];\n\n  totalSlots.forEach((row, i) => {\n    if (i % 7 !== 0) {\n      cells.push(row); // if index not equal 7 that means not go to next week\n    } else {\n      rows.push(cells); // when reach next week we contain all td in last week to rows\n      cells = []; // empty container\n      cells.push(row); // in current loop we still push current row to new container\n    }\n    if (i === totalSlots.length - 1) {\n      // when end loop we add remain date\n      rows.push(cells);\n    }\n  });\n\n  let daysinmonth = rows.map((d, i) => {\n    return <tr>{d}</tr>;\n  });\n\n  return (\n    <div>\n      <table className=\"calendar-day\">\n        <thead>\n          <tr>{weekday}</tr>\n        </thead>\n        <tbody>{daysinmonth}</tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}