{"ast":null,"code":"var _jsxFileName = \"/Users/work/Desktop/coding-interviews/calendar/components/Calendar/Calendar.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { TableCell } from \"@material-ui/core\";\n\nvar firstDayOfMonth = function firstDayOfMonth(dateObj) {\n  return moment(dateObj).startOf(\"month\").format(\"d\");\n};\n\nexport default function Calendar() {\n  _s();\n\n  var _this = this;\n\n  var weekdayshort = moment.weekdaysShort();\n\n  var _useState = useState(moment()),\n      currentDate = _useState[0],\n      setCurrentDate = _useState[1];\n\n  var firstDay = firstDayOfMonth(currentDate);\n  var blanks = [];\n  var emptyCellsBeforeMonth = Array(firstDay).fill(__jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 54\n    }\n  }));\n  var daysInMonth = [];\n\n  for (var d = 1; d <= currentDate.daysInMonth(); d++) {\n    daysInMonth.push(__jsx(\"td\", {\n      key: d,\n      className: \"calendar-day\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    }, d));\n  }\n\n  var weekday = weekdayshort.map(function (day) {\n    return __jsx(\"th\", {\n      key: day,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 43\n      }\n    }, day);\n  });\n  var totalSlots = [].concat(blanks, daysInMonth);\n  var rows = [];\n  var cells = [];\n  totalSlots.forEach(function (row, i) {\n    if (i % 7 !== 0) {\n      cells.push(row); // if index not equal 7 that means not go to next week\n    } else {\n      rows.push(cells); // when reach next week we contain all td in last week to rows\n\n      cells = []; // empty container\n\n      cells.push(row); // in current loop we still push current row to new container\n    }\n\n    if (i === totalSlots.length - 1) {\n      // when end loop we add remain date\n      rows.push(cells);\n    }\n  });\n  var daysinmonth = rows.map(function (d, i) {\n    return __jsx(\"tr\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }\n    }, d);\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(\"table\", {\n    className: \"calendar-day\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, weekday)), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, daysinmonth)));\n}\n\n_s(Calendar, \"BUilyegn1iHQlzg9x/p8lMQPuNs=\");\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/work/Desktop/coding-interviews/calendar/components/Calendar/Calendar.js"],"names":["moment","React","useState","TableCell","firstDayOfMonth","dateObj","startOf","format","Calendar","weekdayshort","weekdaysShort","currentDate","setCurrentDate","firstDay","blanks","emptyCellsBeforeMonth","Array","fill","daysInMonth","d","push","weekday","map","day","totalSlots","rows","cells","forEach","row","i","length","daysinmonth"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { TableCell } from \"@material-ui/core\";\n\nconst firstDayOfMonth = (dateObj) =>\n  moment(dateObj).startOf(\"month\").format(\"d\");\n\nexport default function Calendar() {\n  const weekdayshort = moment.weekdaysShort();\n  const [currentDate, setCurrentDate] = useState(moment());\n  const firstDay = firstDayOfMonth(currentDate);\n  let blanks = [];\n\n  const emptyCellsBeforeMonth = Array(firstDay).fill(<TableCell />);\n\n  let daysInMonth = [];\n  for (let d = 1; d <= currentDate.daysInMonth(); d++) {\n    daysInMonth.push(\n      <td key={d} className=\"calendar-day\">\n        {d}\n      </td>\n    );\n  }\n  let weekday = weekdayshort.map((day) => <th key={day}>{day}</th>);\n\n  var totalSlots = [...blanks, ...daysInMonth];\n  let rows = [];\n  let cells = [];\n\n  totalSlots.forEach((row, i) => {\n    if (i % 7 !== 0) {\n      cells.push(row); // if index not equal 7 that means not go to next week\n    } else {\n      rows.push(cells); // when reach next week we contain all td in last week to rows\n      cells = []; // empty container\n      cells.push(row); // in current loop we still push current row to new container\n    }\n    if (i === totalSlots.length - 1) {\n      // when end loop we add remain date\n      rows.push(cells);\n    }\n  });\n\n  let daysinmonth = rows.map((d, i) => {\n    return <tr>{d}</tr>;\n  });\n\n  return (\n    <div>\n      <table className=\"calendar-day\">\n        <thead>\n          <tr>{weekday}</tr>\n        </thead>\n        <tbody>{daysinmonth}</tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}