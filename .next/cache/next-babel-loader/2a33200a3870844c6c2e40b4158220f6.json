{"ast":null,"code":"var _jsxFileName = \"/Users/work/Desktop/coding-interviews/calendar/components/Calendar/Calendar.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { TableCell, Table, TableHead, TableRow, TableBody } from \"@material-ui/core\";\n\nvar firstDayOfMonth = function firstDayOfMonth(dateObj) {\n  return moment(dateObj).startOf(\"month\").format(\"d\");\n}; // TODO: component for day -> one table cell, days component -> all days, days of week header\n\n\nexport default function Calendar() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(moment()),\n      currentDate = _useState[0],\n      setCurrentDate = _useState[1];\n\n  var daysBeforeMonthStart = firstDayOfMonth(currentDate);\n  var emptyCellsBeforeMonth = [];\n\n  for (var i = 0; i < daysBeforeMonthStart; i++) {\n    emptyCellsBeforeMonth.push(__jsx(TableCell, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 32\n      }\n    }));\n  }\n\n  var daysInMonth = [];\n\n  for (var _i = 1; _i <= currentDate.daysInMonth(); _i++) {\n    daysInMonth.push(__jsx(TableCell, {\n      key: _i + daysBeforeMonthStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 22\n      }\n    }, _i));\n  }\n\n  var totalSlots = [].concat(emptyCellsBeforeMonth, daysInMonth);\n  var rows = [];\n  var counter = 0;\n\n  while (counter < totalSlots.length) {\n    var week = totalSlots.slice(counter, counter + 7);\n    rows.push(week);\n    counter += 7; // TODO: what about empty cells after month end\n  }\n\n  var weeks = rows.map(function (d, i) {\n    return __jsx(TableRow, {\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }\n    }, d);\n  });\n  var weekdayNames = moment.weekdaysShort().map(function (day) {\n    return __jsx(TableCell, {\n      key: day,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 19\n      }\n    }, day);\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, weekdayNames)), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, weeks)));\n}\n\n_s(Calendar, \"BUilyegn1iHQlzg9x/p8lMQPuNs=\");\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/work/Desktop/coding-interviews/calendar/components/Calendar/Calendar.js"],"names":["moment","React","useState","TableCell","Table","TableHead","TableRow","TableBody","firstDayOfMonth","dateObj","startOf","format","Calendar","currentDate","setCurrentDate","daysBeforeMonthStart","emptyCellsBeforeMonth","i","push","daysInMonth","totalSlots","rows","counter","length","week","slice","weeks","map","d","weekdayNames","weekdaysShort","day"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,SADF,EAEEC,KAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,SALF,QAMO,mBANP;;AAQA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD;AAAA,SACtBT,MAAM,CAACS,OAAD,CAAN,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCC,MAAjC,CAAwC,GAAxC,CADsB;AAAA,CAAxB,C,CAGE;;;AAGF,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAAA;;AAAA,kBACKV,QAAQ,CAACF,MAAM,EAAP,CADb;AAAA,MAC1Ba,WAD0B;AAAA,MACbC,cADa;;AAGjC,MAAMC,oBAAoB,GAAGP,eAAe,CAACK,WAAD,CAA5C;AACA,MAAIG,qBAAqB,GAAG,EAA5B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,oBAApB,EAA0CE,CAAC,EAA3C,EAA+C;AAC7CD,IAAAA,qBAAqB,CAACE,IAAtB,CAA2B,MAAC,SAAD;AAAW,MAAA,GAAG,EAAED,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA3B;AACD;;AAED,MAAIE,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIF,EAAC,GAAG,CAAb,EAAgBA,EAAC,IAAIJ,WAAW,CAACM,WAAZ,EAArB,EAAgDF,EAAC,EAAjD,EAAqD;AACnDE,IAAAA,WAAW,CAACD,IAAZ,CAAiB,MAAC,SAAD;AAAW,MAAA,GAAG,EAAED,EAAC,GAAGF,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2CE,EAA3C,CAAjB;AACD;;AAED,MAAIG,UAAU,aAAOJ,qBAAP,EAAiCG,WAAjC,CAAd;AACA,MAAIE,IAAI,GAAG,EAAX;AACA,MAAIC,OAAO,GAAG,CAAd;;AACA,SAAOA,OAAO,GAAGF,UAAU,CAACG,MAA5B,EAAoC;AAClC,QAAMC,IAAI,GAAGJ,UAAU,CAACK,KAAX,CAAiBH,OAAjB,EAA0BA,OAAO,GAAG,CAApC,CAAb;AACAD,IAAAA,IAAI,CAACH,IAAL,CAAUM,IAAV;AACAF,IAAAA,OAAO,IAAI,CAAX,CAHkC,CAIlC;AACD;;AAED,MAAII,KAAK,GAAGL,IAAI,CAACM,GAAL,CAAS,UAACC,CAAD,EAAIX,CAAJ,EAAU;AAC7B,WAAO,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBW,CAAnB,CAAP;AACD,GAFW,CAAZ;AAIA,MAAIC,YAAY,GAAG7B,MAAM,CACtB8B,aADgB,GAEhBH,GAFgB,CAEZ,UAACI,GAAD;AAAA,WAAS,MAAC,SAAD;AAAW,MAAA,GAAG,EAAEA,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBA,GAAtB,CAAT;AAAA,GAFY,CAAnB;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWF,YAAX,CADF,CADF,EAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYH,KAAZ,CAJF,CADF,CADF;AAUD;;GA1CuBd,Q;;KAAAA,Q","sourcesContent":["import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport {\n  TableCell,\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n} from \"@material-ui/core\";\n\nconst firstDayOfMonth = (dateObj) =>\n  moment(dateObj).startOf(\"month\").format(\"d\");\n\n  // TODO: component for day -> one table cell, days component -> all days, days of week header\n  \n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(moment());\n\n  const daysBeforeMonthStart = firstDayOfMonth(currentDate);\n  let emptyCellsBeforeMonth = [];\n  for (let i = 0; i < daysBeforeMonthStart; i++) {\n    emptyCellsBeforeMonth.push(<TableCell key={i} />);\n  }\n\n  let daysInMonth = [];\n  for (let i = 1; i <= currentDate.daysInMonth(); i++) {\n    daysInMonth.push(<TableCell key={i + daysBeforeMonthStart}>{i}</TableCell>);\n  }\n\n  var totalSlots = [...emptyCellsBeforeMonth, ...daysInMonth];\n  let rows = [];\n  let counter = 0;\n  while (counter < totalSlots.length) {\n    const week = totalSlots.slice(counter, counter + 7);\n    rows.push(week);\n    counter += 7;\n    // TODO: what about empty cells after month end\n  }\n\n  let weeks = rows.map((d, i) => {\n    return <TableRow key={i}>{d}</TableRow>;\n  });\n\n  let weekdayNames = moment\n    .weekdaysShort()\n    .map((day) => <TableCell key={day}>{day}</TableCell>);\n\n  return (\n    <div>\n      <Table>\n        <TableHead>\n          <TableRow>{weekdayNames}</TableRow>\n        </TableHead>\n        <TableBody>{weeks}</TableBody>\n      </Table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}