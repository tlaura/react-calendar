{"ast":null,"code":"var _jsxFileName = \"/Users/work/Desktop/coding-interviews/calendar/components/calendar/Calendar.js\";\nvar __jsx = React.createElement;\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { TableCell, Table, TableHead, TableRow, TableBody } from \"@material-ui/core\";\nimport Day from \"../day/Day\";\nimport DaysHeader from \"../daysHeader/DaysHeader\";\n\nconst firstDayOfMonth = dateObj => moment(dateObj).startOf(\"month\").format(\"d\"); // TODO: component for day(integer dayOfMonth, boolean isCurrentMonth) -> one table cell, days component -> all days, days of week header\n\n\nexport default function Calendar() {\n  const {\n    0: currentDate,\n    1: setCurrentDate\n  } = useState(moment());\n  const daysBeforeMonthStart = firstDayOfMonth(currentDate);\n  let emptyCellsBeforeMonth = [];\n\n  for (let i = 0; i < daysBeforeMonthStart; i++) {\n    emptyCellsBeforeMonth.push(__jsx(TableCell, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 32\n      }\n    }));\n  }\n\n  let daysInMonth = [];\n\n  for (let i = 1; i <= currentDate.daysInMonth(); i++) {\n    let isBeforeCurrentDate = i <= currentDate ? true : false;\n    daysInMonth.push(__jsx(Day, {\n      isBeforeCurrentDate: isBeforeCurrentDate,\n      dayOfMonth: i,\n      key: i + daysBeforeMonthStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  var totalSlots = [...emptyCellsBeforeMonth, ...daysInMonth];\n  let rows = [];\n  let counter = 0;\n\n  while (counter < totalSlots.length) {\n    const week = totalSlots.slice(counter, counter + 7);\n    rows.push(week);\n    counter += 7; // TODO: what about empty cells after month end\n  }\n\n  let weeks = rows.map((d, i) => {\n    return __jsx(TableRow, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }\n    }, d);\n  }); // let weekdayNames = moment\n  //   .weekdaysShort()\n  //   .map((day) => <TableCell key={day}>{day}</TableCell>);\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(DaysHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  })), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, weeks)));\n}","map":{"version":3,"sources":["/Users/work/Desktop/coding-interviews/calendar/components/calendar/Calendar.js"],"names":["moment","React","useState","TableCell","Table","TableHead","TableRow","TableBody","Day","DaysHeader","firstDayOfMonth","dateObj","startOf","format","Calendar","currentDate","setCurrentDate","daysBeforeMonthStart","emptyCellsBeforeMonth","i","push","daysInMonth","isBeforeCurrentDate","totalSlots","rows","counter","length","week","slice","weeks","map","d"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,SADF,EAEEC,KAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,SALF,QAMO,mBANP;AAOA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,MAAMC,eAAe,GAAIC,OAAD,IACtBX,MAAM,CAACW,OAAD,CAAN,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCC,MAAjC,CAAwC,GAAxC,CADF,C,CAGA;;;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCd,QAAQ,CAACF,MAAM,EAAP,CAA9C;AAEA,QAAMiB,oBAAoB,GAAGP,eAAe,CAACK,WAAD,CAA5C;AACA,MAAIG,qBAAqB,GAAG,EAA5B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,oBAApB,EAA0CE,CAAC,EAA3C,EAA+C;AAC7CD,IAAAA,qBAAqB,CAACE,IAAtB,CAA2B,MAAC,SAAD;AAAW,MAAA,GAAG,EAAED,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA3B;AACD;;AAED,MAAIE,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,WAAW,CAACM,WAAZ,EAArB,EAAgDF,CAAC,EAAjD,EAAqD;AACnD,QAAIG,mBAAmB,GAAGH,CAAC,IAAIJ,WAAL,GAAmB,IAAnB,GAA0B,KAApD;AACAM,IAAAA,WAAW,CAACD,IAAZ,CACE,MAAC,GAAD;AACE,MAAA,mBAAmB,EAAEE,mBADvB;AAEE,MAAA,UAAU,EAAEH,CAFd;AAGE,MAAA,GAAG,EAAEA,CAAC,GAAGF,oBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AAED,MAAIM,UAAU,GAAG,CAAC,GAAGL,qBAAJ,EAA2B,GAAGG,WAA9B,CAAjB;AACA,MAAIG,IAAI,GAAG,EAAX;AACA,MAAIC,OAAO,GAAG,CAAd;;AACA,SAAOA,OAAO,GAAGF,UAAU,CAACG,MAA5B,EAAoC;AAClC,UAAMC,IAAI,GAAGJ,UAAU,CAACK,KAAX,CAAiBH,OAAjB,EAA0BA,OAAO,GAAG,CAApC,CAAb;AACAD,IAAAA,IAAI,CAACJ,IAAL,CAAUO,IAAV;AACAF,IAAAA,OAAO,IAAI,CAAX,CAHkC,CAIlC;AACD;;AAED,MAAII,KAAK,GAAGL,IAAI,CAACM,GAAL,CAAS,CAACC,CAAD,EAAIZ,CAAJ,KAAU;AAC7B,WAAO,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBY,CAAnB,CAAP;AACD,GAFW,CAAZ,CA/BiC,CAmCjC;AACA;AACA;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYF,KAAZ,CAJF,CADF,CADF;AAUD","sourcesContent":["import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport {\n  TableCell,\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n} from \"@material-ui/core\";\nimport Day from \"../day/Day\";\nimport DaysHeader from \"../daysHeader/DaysHeader\";\n\nconst firstDayOfMonth = (dateObj) =>\n  moment(dateObj).startOf(\"month\").format(\"d\");\n\n// TODO: component for day(integer dayOfMonth, boolean isCurrentMonth) -> one table cell, days component -> all days, days of week header\n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(moment());\n\n  const daysBeforeMonthStart = firstDayOfMonth(currentDate);\n  let emptyCellsBeforeMonth = [];\n  for (let i = 0; i < daysBeforeMonthStart; i++) {\n    emptyCellsBeforeMonth.push(<TableCell key={i} />);\n  }\n\n  let daysInMonth = [];\n  for (let i = 1; i <= currentDate.daysInMonth(); i++) {\n    let isBeforeCurrentDate = i <= currentDate ? true : false\n    daysInMonth.push(\n      <Day\n        isBeforeCurrentDate={isBeforeCurrentDate}\n        dayOfMonth={i}\n        key={i + daysBeforeMonthStart}\n      ></Day>\n    );\n  }\n\n  var totalSlots = [...emptyCellsBeforeMonth, ...daysInMonth];\n  let rows = [];\n  let counter = 0;\n  while (counter < totalSlots.length) {\n    const week = totalSlots.slice(counter, counter + 7);\n    rows.push(week);\n    counter += 7;\n    // TODO: what about empty cells after month end\n  }\n\n  let weeks = rows.map((d, i) => {\n    return <TableRow key={i}>{d}</TableRow>;\n  });\n\n  // let weekdayNames = moment\n  //   .weekdaysShort()\n  //   .map((day) => <TableCell key={day}>{day}</TableCell>);\n\n  return (\n    <div>\n      <Table>\n        <TableHead>\n          <DaysHeader></DaysHeader>\n        </TableHead>\n        <TableBody>{weeks}</TableBody>\n      </Table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}