{"ast":null,"code":"var _jsxFileName = \"/Users/work/Desktop/coding-interviews/calendar/components/calendar/Calendar.js\";\nvar __jsx = React.createElement;\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { TableCell, Table, TableHead, TableBody } from \"@material-ui/core\";\nimport Day from \"../Day\";\nimport DaysHeader from \"../DaysHeader\";\nimport Week from \"../Week\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles({\n  table: {\n    Width: 300\n  }\n});\n\nconst firstDayOfMonth = dateObj => moment(dateObj).startOf(\"month\").format(\"d\");\n\nexport default function Calendar() {\n  const classes = useStyles();\n  const {\n    0: currentDate,\n    1: setCurrentDate\n  } = useState(moment());\n  const daysBeforeMonthStart = firstDayOfMonth(currentDate);\n  let emptyCellsBeforeMonth = [];\n\n  for (let i = 0; i < daysBeforeMonthStart; i++) {\n    emptyCellsBeforeMonth.push(__jsx(TableCell, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 32\n      }\n    }));\n  }\n\n  let daysInMonth = [];\n\n  for (let i = 1; i <= currentDate.daysInMonth(); i++) {\n    let isBeforeCurrentDate = i < currentDate.format(\"D\") ? true : false;\n    daysInMonth.push(__jsx(Day, {\n      isBeforeCurrentDate: isBeforeCurrentDate,\n      dayOfMonth: i,\n      key: i + daysBeforeMonthStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  var totalSlots = [...emptyCellsBeforeMonth, ...daysInMonth];\n  let counter = 0;\n  let weeks = [];\n\n  for (let i = 0; i < totalSlots.length; i + 7) {\n    const weekdays = totalSlots.slice(counter, counter + 7);\n    weeks.push(__jsx(Week, {\n      days: weekdays,\n      index: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 16\n      }\n    }));\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, __jsx(DaysHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, weeks)));\n}","map":{"version":3,"sources":["/Users/work/Desktop/coding-interviews/calendar/components/calendar/Calendar.js"],"names":["moment","React","useState","TableCell","Table","TableHead","TableBody","Day","DaysHeader","Week","makeStyles","useStyles","table","Width","firstDayOfMonth","dateObj","startOf","format","Calendar","classes","currentDate","setCurrentDate","daysBeforeMonthStart","emptyCellsBeforeMonth","i","push","daysInMonth","isBeforeCurrentDate","totalSlots","counter","weeks","length","weekdays","slice"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,SAA3B,EAAsCC,SAAtC,QAAuD,mBAAvD;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAAC;AAC3BE,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AADF;AADoB,CAAD,CAA5B;;AAMA,MAAMC,eAAe,GAAIC,OAAD,IACtBf,MAAM,CAACe,OAAD,CAAN,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCC,MAAjC,CAAwC,GAAxC,CADF;;AAGA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAMC,OAAO,GAAGR,SAAS,EAAzB;AACA,QAAM;AAAA,OAACS,WAAD;AAAA,OAAcC;AAAd,MAAgCnB,QAAQ,CAACF,MAAM,EAAP,CAA9C;AAEA,QAAMsB,oBAAoB,GAAGR,eAAe,CAACM,WAAD,CAA5C;AACA,MAAIG,qBAAqB,GAAG,EAA5B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,oBAApB,EAA0CE,CAAC,EAA3C,EAA+C;AAC7CD,IAAAA,qBAAqB,CAACE,IAAtB,CAA2B,MAAC,SAAD;AAAW,MAAA,GAAG,EAAED,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA3B;AACD;;AAED,MAAIE,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,WAAW,CAACM,WAAZ,EAArB,EAAgDF,CAAC,EAAjD,EAAqD;AACnD,QAAIG,mBAAmB,GAAGH,CAAC,GAAGJ,WAAW,CAACH,MAAZ,CAAmB,GAAnB,CAAJ,GAA8B,IAA9B,GAAqC,KAA/D;AACAS,IAAAA,WAAW,CAACD,IAAZ,CACE,MAAC,GAAD;AACE,MAAA,mBAAmB,EAAEE,mBADvB;AAEE,MAAA,UAAU,EAAEH,CAFd;AAGE,MAAA,GAAG,EAAEA,CAAC,GAAGF,oBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AAED,MAAIM,UAAU,GAAG,CAAC,GAAGL,qBAAJ,EAA2B,GAAGG,WAA9B,CAAjB;AACA,MAAIG,OAAO,GAAG,CAAd;AAEA,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,UAAU,CAACG,MAA/B,EAAuCP,CAAC,GAAG,CAA3C,EAA8C;AAC5C,UAAMQ,QAAQ,GAAGJ,UAAU,CAACK,KAAX,CAAiBJ,OAAjB,EAA0BA,OAAO,GAAG,CAApC,CAAjB;AACAC,IAAAA,KAAK,CAACL,IAAN,CAAW,MAAC,IAAD;AAAM,MAAA,IAAI,EAAEO,QAAZ;AAAsB,MAAA,KAAK,EAAER,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYM,KAAZ,CAJF,CADF,CADF;AAUD","sourcesContent":["import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { TableCell, Table, TableHead, TableBody } from \"@material-ui/core\";\nimport Day from \"../Day\";\nimport DaysHeader from \"../DaysHeader\";\nimport Week from \"../Week\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  table: {\n    Width: 300,\n  },\n});\n\nconst firstDayOfMonth = (dateObj) =>\n  moment(dateObj).startOf(\"month\").format(\"d\");\n\nexport default function Calendar() {\n  const classes = useStyles();\n  const [currentDate, setCurrentDate] = useState(moment());\n\n  const daysBeforeMonthStart = firstDayOfMonth(currentDate);\n  let emptyCellsBeforeMonth = [];\n  for (let i = 0; i < daysBeforeMonthStart; i++) {\n    emptyCellsBeforeMonth.push(<TableCell key={i} />);\n  }\n\n  let daysInMonth = [];\n  for (let i = 1; i <= currentDate.daysInMonth(); i++) {\n    let isBeforeCurrentDate = i < currentDate.format(\"D\") ? true : false;\n    daysInMonth.push(\n      <Day\n        isBeforeCurrentDate={isBeforeCurrentDate}\n        dayOfMonth={i}\n        key={i + daysBeforeMonthStart}\n      ></Day>\n    );\n  }\n\n  var totalSlots = [...emptyCellsBeforeMonth, ...daysInMonth];\n  let counter = 0;\n\n  let weeks = [];\n  for (let i = 0; i < totalSlots.length; i + 7) {\n    const weekdays = totalSlots.slice(counter, counter + 7);\n    weeks.push(<Week days={weekdays} index={i} />);\n  }\n\n  return (\n    <div>\n      <Table>\n        <TableHead>\n          <DaysHeader></DaysHeader>\n        </TableHead>\n        <TableBody>{weeks}</TableBody>\n      </Table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}